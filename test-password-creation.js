// Script pour tester la cr√©ation de mots de passe avec diff√©rents utilisateurs
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const fs = require('fs');

// Configuration
const API_URL = 'http://localhost:3001/api/v1';
const USERS = [
  {
    email: 'test@example.com',
    password: 'password123',
    expectedUserId: 'test-user-id-123'
  },
  {
    email: 'Antoineronold@proton.me',
    password: 'Antoineronold@proton.me',
    expectedUserId: 'antoine-user-id-456'
  }
];

// Fonction pour extraire les cookies d'une r√©ponse
const extractCookies = (headers) => {
  const cookies = {};
  const cookieHeader = headers.get('set-cookie');
  
  if (!cookieHeader) return cookies;
  
  cookieHeader.split(',').forEach(cookie => {
    const parts = cookie.split(';')[0].trim().split('=');
    if (parts.length === 2) {
      cookies[parts[0]] = parts[1];
    }
  });
  
  return cookies;
};

// Fonction pour se connecter
const login = async (email, password) => {
  console.log(`\nüîë Tentative de connexion avec ${email}...`);
  
  const response = await fetch(`${API_URL}/auth/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ email, password })
  });
  
  const data = await response.json();
  const cookies = extractCookies(response.headers);
  
  console.log(`‚úÖ Connexion r√©ussie pour ${email}`);
  console.log(`üìã R√©ponse compl√®te:`, JSON.stringify(data, null, 2));
  
  // V√©rifier si les donn√©es sont structur√©es comme pr√©vu
  if (data && data.data && data.data.user) {
    console.log(`üìã Donn√©es utilisateur:`, JSON.stringify(data.data.user, null, 2));
    console.log(`üè¢ Organisation actuelle: ${data.data.currentOrgId || 'Non d√©finie'}`);
  } else {
    console.log(`‚ö†Ô∏è Structure de r√©ponse inattendue`);
  }
  
  return {
    user: data.data.user,
    cookies,
    currentOrgId: data.data.currentOrgId
  };
};

// Fonction pour cr√©er un mot de passe
const createPassword = async (sessionCookies, passwordData) => {
  console.log(`\nüîí Cr√©ation d'un mot de passe: ${passwordData.title}`);
  
  const cookieString = Object.entries(sessionCookies)
    .map(([key, value]) => `${key}=${value}`)
    .join('; ');
  
  const response = await fetch(`${API_URL}/passwords`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Cookie': cookieString
    },
    body: JSON.stringify(passwordData)
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    console.error(`‚ùå Erreur lors de la cr√©ation du mot de passe: ${response.status}`);
    console.error(errorText);
    return null;
  }
  
  const data = await response.json();
  console.log(`‚úÖ Mot de passe cr√©√© avec succ√®s: ID=${data.data.id}`);
  return data.data;
};

// Fonction pour r√©cup√©rer les mots de passe
const getPasswords = async (sessionCookies) => {
  console.log(`\nüìã R√©cup√©ration des mots de passe...`);
  
  const cookieString = Object.entries(sessionCookies)
    .map(([key, value]) => `${key}=${value}`)
    .join('; ');
  
  const response = await fetch(`${API_URL}/passwords`, {
    method: 'GET',
    headers: {
      'Cookie': cookieString
    }
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    console.error(`‚ùå Erreur lors de la r√©cup√©ration des mots de passe: ${response.status}`);
    console.error(errorText);
    return [];
  }
  
  const data = await response.json();
  console.log(`‚úÖ ${data.data.length} mots de passe r√©cup√©r√©s`);
  return data.data;
};

// Fonction principale pour ex√©cuter les tests
const runTests = async () => {
  console.log('D√©marrage des tests...');
  try {
    // Tester avec le premier utilisateur
    const session1 = await login(USERS[0].email, USERS[0].password);
    
    // Cr√©er un mot de passe pour le premier utilisateur
    const password1 = await createPassword(session1.cookies, {
      title: "Compte GitHub",
      username: "user1",
      password: "GitHubPass123!",
      url: "https://github.com",
      notes: "Compte principal GitHub"
    });
    
    // R√©cup√©rer les mots de passe du premier utilisateur
    const passwords1 = await getPasswords(session1.cookies);
    console.log(`üìä Mots de passe de ${USERS[0].email}:`, passwords1.map(p => p.title));
    
    // Tester avec le deuxi√®me utilisateur
    const session2 = await login(USERS[1].email, USERS[1].password);
    
    // Cr√©er un mot de passe pour le deuxi√®me utilisateur
    const password2 = await createPassword(session2.cookies, {
      title: "Compte Twitter",
      username: "user2",
      password: "TwitterPass456!",
      url: "https://twitter.com",
      notes: "Compte professionnel Twitter"
    });
    
    // R√©cup√©rer les mots de passe du deuxi√®me utilisateur
    const passwords2 = await getPasswords(session2.cookies);
    console.log(`üìä Mots de passe de ${USERS[1].email}:`, passwords2.map(p => p.title));
    
    // V√©rifier que les utilisateurs ont acc√®s uniquement √† leurs propres mots de passe
    console.log("\nüîç V√©rification de l'isolation des donn√©es:");
    console.log(`üë§ ${USERS[0].email} a ${passwords1.length} mot(s) de passe`);
    console.log(`üë§ ${USERS[1].email} a ${passwords2.length} mot(s) de passe`);
    
    const user1HasUser2Passwords = passwords1.some(p => p.title === "Compte Twitter");
    const user2HasUser1Passwords = passwords2.some(p => p.title === "Compte GitHub");
    
    if (!user1HasUser2Passwords && !user2HasUser1Passwords) {
      console.log("‚úÖ SUCC√àS: Les donn√©es sont correctement isol√©es entre les utilisateurs!");
    } else {
      console.log("‚ùå √âCHEC: Les donn√©es ne sont pas correctement isol√©es entre les utilisateurs!");
    }
    
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ex√©cution des tests:", error);
  }
};

// Ex√©cuter les tests
runTests().catch(error => {
  console.error('Erreur non g√©r√©e:', error);
});

// Afficher un message √† la fin
setTimeout(() => {
  console.log('Script termin√©.');
}, 1000);
